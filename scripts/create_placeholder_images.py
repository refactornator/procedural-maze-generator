#!/usr/bin/env python3
"""
Create placeholder images for the gallery when full dependencies aren't available.

This script creates simple placeholder images that show the maze structure
using basic text rendering, ensuring the gallery always has visual content.
"""

import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from maze_generator import Maze
from maze_generator.algorithms.generators import (
    DepthFirstSearchGenerator,
    KruskalGenerator,
    PrimGenerator,
)
from maze_generator.algorithms.solvers import AStarSolver
from maze_generator.visualization import AsciiRenderer


def create_text_image(text: str, output_path: Path, width: int = 800, height: int = 600):
    """Create a simple text-based image using ASCII art."""
    try:
        # Try to create a simple SVG with the ASCII art
        svg_content = f'''<?xml version="1.0" encoding="UTF-8"?>
<svg width="{width}" height="{height}" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="#f8f9fa"/>
  <text x="20" y="30" font-family="monospace" font-size="12" fill="#2c3e50">
    <tspan x="20" dy="0">Procedural Maze Generator</tspan>
    <tspan x="20" dy="20">ASCII Representation:</tspan>
  </text>
  <text x="20" y="80" font-family="monospace" font-size="10" fill="#34495e">
'''
        
        lines = text.split('\n')
        for i, line in enumerate(lines[:40]):  # Limit to 40 lines
            # Escape XML characters
            escaped_line = line.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            svg_content += f'    <tspan x="20" dy="14">{escaped_line}</tspan>\n'
        
        svg_content += '''  </text>
  <text x="20" y="580" font-family="sans-serif" font-size="10" fill="#7f8c8d">
    Generated by Procedural Maze Generator - Install matplotlib/PIL for high-quality images
  </text>
</svg>'''
        
        # Save as SVG (which can be displayed in browsers and GitHub)
        svg_path = output_path.with_suffix('.svg')
        with open(svg_path, 'w') as f:
            f.write(svg_content)
        
        return svg_path
        
    except Exception as e:
        print(f"Warning: Could not create image for {output_path}: {e}")
        return None


def create_placeholder_gallery():
    """Create placeholder images for the gallery."""
    print("üñºÔ∏è  Creating Placeholder Gallery Images")
    print("=" * 45)
    
    gallery_dir = Path("docs/gallery")
    gallery_dir.mkdir(parents=True, exist_ok=True)
    
    # Create algorithm examples
    algorithms = [
        ("dfs", "Depth-First Search", DepthFirstSearchGenerator),
        ("kruskal", "Kruskal's Algorithm", KruskalGenerator),
        ("prim", "Prim's Algorithm", PrimGenerator),
    ]
    
    for algo_name, display_name, generator_class in algorithms:
        print(f"  Creating {display_name} placeholder...")
        
        # Generate maze
        maze = Maze(12, 8)
        generator = generator_class(seed=42)
        generator.generate(maze)
        
        # Create ASCII representation
        ascii_renderer = AsciiRenderer()
        ascii_output = ascii_renderer.render_with_border(maze, title=f"{display_name} Maze")
        
        # Create placeholder image
        image_path = gallery_dir / "algorithms" / f"{algo_name}_maze_example.png"
        image_path.parent.mkdir(exist_ok=True)
        
        created_path = create_text_image(ascii_output, image_path)
        if created_path:
            print(f"    ‚úÖ Created: {created_path.relative_to(gallery_dir)}")
    
    # Create solution example
    print("  Creating solution placeholder...")
    maze = Maze(10, 8)
    maze.set_start(0, 0)
    maze.set_end(9, 7)
    
    generator = DepthFirstSearchGenerator(seed=123)
    generator.generate(maze)
    
    solver = AStarSolver()
    solution = solver.solve(maze)
    
    if solution:
        ascii_output = ascii_renderer.render_with_border(
            maze, show_solution=True, 
            title=f"A* Solution ({len(solution)} steps)"
        )
        
        image_path = gallery_dir / "solutions" / "astar_solution_example.png"
        image_path.parent.mkdir(exist_ok=True)
        
        created_path = create_text_image(ascii_output, image_path)
        if created_path:
            print(f"    ‚úÖ Created: {created_path.relative_to(gallery_dir)}")
    
    # Create README example
    print("  Creating README placeholder...")
    maze = Maze(8, 6)
    maze.set_start(0, 0)
    maze.set_end(7, 5)
    
    generator = DepthFirstSearchGenerator(seed=42)
    generator.generate(maze)
    
    solver = AStarSolver()
    solver.solve(maze)
    
    ascii_output = ascii_renderer.render_compact(maze, show_solution=True)
    
    image_path = gallery_dir / "readme" / "readme_example.png"
    image_path.parent.mkdir(exist_ok=True)
    
    created_path = create_text_image(ascii_output, image_path, width=600, height=400)
    if created_path:
        print(f"    ‚úÖ Created: {created_path.relative_to(gallery_dir)}")
    
    print("\n‚úÖ Placeholder gallery created!")
    print("üí° These SVG placeholders will be replaced with high-quality PNG images")
    print("   when the full dependencies (matplotlib, PIL) are available.")


def main():
    """Create placeholder gallery."""
    try:
        create_placeholder_gallery()
        return 0
    except Exception as e:
        print(f"‚ùå Error creating placeholder gallery: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
